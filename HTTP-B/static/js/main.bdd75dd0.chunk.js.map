{"version":3,"sources":["views/Profile.js","Components/tr.js","Components/table.js","utils/MediaAPI.js","Components/Nav.js","views/Home.js","views/Single.js","App.js","serviceWorker.js","index.js"],"names":["Profile","props","react_default","a","createElement","Fragment","mediaUrl","Img","console","log","_props$pic","pic","thumbnails","screenshot","title","src","w160","alt","Tr","_props$pic2","description","tr_Img","react_router_dom","to","Table","rows","picArray","map","item","i","tr","key","apiUrl","Nav","Home","table","Single","state","file","filename","this","Component","App","_this2","fetch","then","response","json","Promise","all","file_id","pics","setState","_this3","className","Components_Nav","react_router","exact","path","render","views_Home","Object","assign","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAUeA,EARC,SAACC,GACb,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,uBCANE,EAAW,8CAEXC,EAAM,SAACN,GACTO,QAAQC,IAAI,QAASR,GADF,IAAAS,EAEqBT,EAAMU,IAAvCC,EAFYF,EAEZE,WAAYC,EAFAH,EAEAG,WAAYC,EAFZJ,EAEYI,MAC/B,OAAmB,OAAfF,EACOV,EAAAC,EAAAC,cAAA,OAAKW,IAAKT,EAAWM,EAAWI,KAAMC,IAAKH,IAE3CZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKT,EAAWO,EAAYI,IAAKH,KA0BtCI,EAtBJ,SAACjB,GAAU,IAAAkB,EACWlB,EAAMU,IAA5BG,EADWK,EACXL,MAAOM,EADID,EACJC,YACd,OACIlB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACiB,EAAD,CAAKV,IAAKV,EAAMU,OAEpBT,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAKU,GACLZ,EAAAC,EAAAC,cAAA,SAAIgB,IAERlB,EAAAC,EAAAC,cAAA,UAEIF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,WAAT,WCTDC,EAjBD,SAACvB,GACX,IAAMwB,EAAOxB,EAAMyB,SAASC,IAAI,SAACC,EAAMC,GACnC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,CAAIC,IAAKF,EAAGlB,IAAKiB,MAE5B,OACI1B,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACCqB,KCXPO,EAAS,4CCkBAC,EAfH,WACR,OACI/B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEJrB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,eCMLW,EAbF,SAACjC,GACV,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAC+B,EAAD,CAAOT,SAAUzB,EAAMyB,aCmBpBU,6MAvBX9B,SAAW,gDACX+B,MAAQ,CACJC,KAAM,CACFC,SAAU,uCACVzB,MAAO,iFAKX,OACIZ,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,UAAKoC,KAAKH,MAAMC,KAAKxB,OACrBZ,EAAAC,EAAAC,cAAA,OAAKW,IAAKyB,KAAKlC,SAAWkC,KAAKH,MAAMC,KAAKC,SACrCtB,IAAKuB,KAAKH,MAAMC,KAAKxB,gBAdrB2B,aCqCNC,6MA7BXV,OAAS,8CAETK,MAAQ,CACJX,SAAU,uFAGM,IAAAiB,EAAAH,KJbbI,MAAMZ,GAAQa,KAAK,SAAAC,GACtB,OAAOA,EAASC,SACjBF,KAAK,SAAAE,GAEJ,OADAvC,QAAQC,IAAIsC,GACLC,QAAQC,IAAIF,EAAKpB,IAAI,SAAAhB,GACxB,OAAOiC,MAAMZ,EAASrB,EAAIuC,SAASL,KAAK,SAAAC,GACpC,OAAOA,EAASC,YAEpBF,KAAK,SAAAM,GAEL,OADA3C,QAAQC,IAAI0C,GACLA,MIIGN,KAAK,SAAAM,GACfR,EAAKS,SAAS,CAAC1B,SAAUyB,uCAIxB,IAAAE,EAAAb,KACL,OACItC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACIpB,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,aACXpD,EAAAC,EAAAC,cAACmD,EAAD,MACArD,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAC1D,GAAD,OAC1BC,EAAAC,EAAAC,cAACwD,EAADC,OAAAC,OAAA,GAAU7D,EAAV,CAAiByB,SAAU2B,EAAKhB,MAAMX,eAE1CxB,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAOE,KAAK,WAAWK,UAAW/D,IAClCE,EAAAC,EAAAC,cAACoD,EAAA,EAAD,CAAOE,KAAK,UAAUK,UAAW3B,aAvBnCK,aCGEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASV,OAAOzD,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.bdd75dd0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Profile</h1>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Profile;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Profile from \"../views/Profile\";\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst mediaUrl = 'http://media.mw.metropolia.fi/wbma/uploads/';\r\n\r\nconst Img = (props) => {\r\n    console.log('props', props);\r\n    const {thumbnails, screenshot, title} = props.pic;\r\n    if (thumbnails !== null) {\r\n        return <img src={mediaUrl + thumbnails.w160} alt={title}/>;\r\n    } else {\r\n        return <img src={mediaUrl + screenshot} alt={title}/>;\r\n    }\r\n};\r\n\r\nconst Tr = (props) => {\r\n    const {title, description} = props.pic;\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <Img pic={props.pic}/>\r\n            </td>\r\n            <td>\r\n                <h3>{title}</h3>\r\n                <p>{description}</p>\r\n            </td>\r\n            <td>\r\n\r\n                <Link to=\"/single\">View</Link>\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nTr.propTypes = {\r\n    pic: PropTypes.object,\r\n};\r\nexport default Tr;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Tr from './tr';\r\n\r\nconst Table = (props) => {\r\n    const rows = props.picArray.map((item, i) => {\r\n        return <Tr key={i} pic={item}/>;\r\n    });\r\n    return (\r\n        <table>\r\n            <tbody>\r\n            {rows}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nTable.propTypes = {\r\n    picArray: PropTypes.array,\r\n};\r\n\r\nexport default Table;","const apiUrl = 'http://media.mw.metropolia.fi/wbma/media/';\r\n\r\n\r\nconst getAllMedia = () => {\r\n    return fetch(apiUrl).then(response => {\r\n        return response.json();\r\n    }).then(json => {\r\n        console.log(json);\r\n        return Promise.all(json.map(pic => {\r\n            return fetch(apiUrl + pic.file_id).then(response => {\r\n                return response.json();\r\n            });\r\n        })).then(pics => {\r\n            console.log(pics);\r\n            return pics;\r\n        });\r\n    });\r\n};\r\n\r\nconst getSingleMedia = (id) => {\r\n    return fetch\r\n};\r\n\r\nexport {getAllMedia};","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <Link to=\"/\">Home</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to=\"/profile\">Profile</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\nimport Table from \"../Components/table\";\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Home = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>Home</h1>\r\n            <Table picArray={props.picArray}/>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nHome.propTypes = {\r\n    picArray: PropTypes.array,\r\n};\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Single extends Component {\r\n    mediaUrl = 'http://media.mw.metropolia.fi/wbma/uploads/';\r\n    state = {\r\n        file: {\r\n            filename: 'b2db3cce51674aba84d9476a545c5cc4.jpg',\r\n            title: 'Test',\r\n        },\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <h1>{this.state.file.title}</h1>\r\n                <img src={this.mediaUrl + this.state.file.filename}\r\n                     alt={this.state.file.title}/>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nSingle.propTypes = {\r\n    match: PropTypes.object,\r\n};\r\n\r\nexport default Single;","import React, {Component} from 'react';\r\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\r\nimport Table from './Components/table';\r\nimport {getAllMedia} from \"./utils/MediaAPI\";\r\nimport Nav from \"./Components/Nav\";\r\nimport Home from \"./views/Home\";\r\nimport Profile from \"./views/Profile\";\r\nimport Single from \"./views/Single\";\r\n\r\nclass App extends Component {\r\n\r\n    apiUrl = 'http://media.mw.metropolia.fi/wbma/media/';\r\n\r\n    state = {\r\n        picArray: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        getAllMedia().then(pics => {\r\n            this.setState({picArray: pics})\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <div className=\"container\">\r\n                    <Nav/>\r\n                    <Route exact path=\"/\" render={(props) => (\r\n                        <Home {...props} picArray={this.state.picArray}/>\r\n                    )}/>\r\n                    <Route path=\"/profile\" component={Profile}/>\r\n                    <Route path=\"/single\" component={Single}/>\r\n\r\n                </div>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}